Ext.data.JsonP.gantt_calendars({"guide":"<h1 id='gantt_calendars-section-using-calendars'>Using calendars</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/gantt_calendars-section-introduction'>Introduction</a></li>\n<li><a href='#!/guide/gantt_calendars-section-project-calendar-and-basic-features'>Project calendar and basic features</a></li>\n<li><a href='#!/guide/gantt_calendars-section-calendar-manager'>Calendar manager</a></li>\n<li><a href='#!/guide/gantt_calendars-section-advanced-features'>Advanced features</a></li>\n<li><a href='#!/guide/gantt_calendars-section-calendar-crud'>Calendar CRUD</a></li>\n<li><a href='#!/guide/gantt_calendars-section-cheatsheet'>Cheatsheet</a></li>\n</ol>\n</div>\n\n<h2 id='gantt_calendars-section-introduction'>Introduction</h2>\n\n<p>Ext Gantt is very flexible in defining availability time for your tasks and resources.\nEvery task and resource can have their own <em>calendars</em>, specifying the time when they can be performed (or can work) - accurate down to minutes.\nAdditionally, calendars can form hierarchical structures, where every new child calendar can override the rules defined by its parents.\nAt the same time, if you don't need this level of precision and control, a few base options will configure the default behavior for everything.</p>\n\n<h2 id='gantt_calendars-section-project-calendar-and-basic-features'>Project calendar and basic features</h2>\n\n<p>A Project calendar is the \"main\" instance of the <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a> class, which affects the whole project and defines global rules.\nFor example, the days of the week that are defined as non-working time. It can be instantiated as any other Ext JS class and provided either to the <a href=\"#!/api/Gnt.data.TaskStore\" rel=\"Gnt.data.TaskStore\" class=\"docClass\">taskStore</a>\nor to the <a href=\"#!/api/Gnt.panel.Gantt\" rel=\"Gnt.panel.Gantt\" class=\"docClass\">gantt panel</a> (the first option is preferable):</p>\n\n<pre><code>var taskStore   = new <a href=\"#!/api/Gnt.data.TaskStore\" rel=\"Gnt.data.TaskStore\" class=\"docClass\">Gnt.data.TaskStore</a>({\n    calendar    : new <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a>({ ... })\n})\n// or\nvar ganttPanel  = new <a href=\"#!/api/Gnt.panel.Gantt\" rel=\"Gnt.panel.Gantt\" class=\"docClass\">Gnt.panel.Gantt</a>({\n    calendar    : new <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a>({ ... }),\n})\n</code></pre>\n\n<p>And when using the <a href=\"#!/guide/gantt_crud_manager\">CRUD manager</a> with the <a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">calendar manager</a>, the project calendar will be set automatically:</p>\n\n<pre><code>var taskStore   = new <a href=\"#!/api/Gnt.data.TaskStore\" rel=\"Gnt.data.TaskStore\" class=\"docClass\">Gnt.data.TaskStore</a>({\n    calendarManager : new <a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">Gnt.data.CalendarManager</a>({ ... })\n})\n\nvar crud = new <a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a>({\n    // task store will get its calendar right after the calendarManager is loaded\n    taskStore : taskStore,\n    ...\n})\n</code></pre>\n\n<p>The Calendar class has various options, here are the most important ones:</p>\n\n<ul>\n<li><a href=\"#!/api/Gnt.data.Calendar-cfg-daysPerMonth\" rel=\"Gnt.data.Calendar-cfg-daysPerMonth\" class=\"docClass\">daysPerMonth</a>, <a href=\"#!/api/Gnt.data.Calendar-cfg-daysPerWeek\" rel=\"Gnt.data.Calendar-cfg-daysPerWeek\" class=\"docClass\">daysPerWeek</a>, <a href=\"#!/api/Gnt.data.Calendar-cfg-hoursPerDay\" rel=\"Gnt.data.Calendar-cfg-hoursPerDay\" class=\"docClass\">hoursPerDay</a> This group of\noptions define the conversion rules for duration and effort. They are needed since certain duration units cannot be converted to other units unambiguously.\nFor example a task with 1 month duration may mean 30, 31 or may be 28 days. A 1 day task can be 8 hours or 10 hours depending on how long your working day is.\nFor such conversions, the calendar uses these options. <strong>Please note</strong>, for backward compatibility reasons <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a> is configured with <code>hoursPerDay=24, daysPerWeek=7, daysPerMonth=30</code> settings.\nFor normal business time conversion rules (8 hours per day, etc), use <a href=\"#!/api/Gnt.data.calendar.BusinessTime\" rel=\"Gnt.data.calendar.BusinessTime\" class=\"docClass\">Gnt.data.calendar.BusinessTime</a></li>\n<li><a href=\"#!/api/Gnt.data.Calendar-cfg-defaultAvailability\" rel=\"Gnt.data.Calendar-cfg-defaultAvailability\" class=\"docClass\">defaultAvailability</a> This option defines the time during the day, when work can be performed.</li>\n<li><a href=\"#!/api/Gnt.data.Calendar-cfg-weekendsAreWorkdays\" rel=\"Gnt.data.Calendar-cfg-weekendsAreWorkdays\" class=\"docClass\">weekendsAreWorkdays</a> Boolean option, indicating whether weekends should be considered as working days and included in the\ntask durations.</li>\n</ul>\n\n\n<p>Some other options related to weekends and holidays:</p>\n\n<ul>\n<li><a href=\"#!/api/Gnt.panel.Gantt-cfg-highlightWeekends\" rel=\"Gnt.panel.Gantt-cfg-highlightWeekends\" class=\"docClass\">highlightWeekends</a> <code>true</code> to highlight weekends and holidays visually in the Gantt chart</li>\n<li><a href=\"#!/api/Gnt.data.TaskStore-cfg-skipWeekendsDuringDragDrop\" rel=\"Gnt.data.TaskStore-cfg-skipWeekendsDuringDragDrop\" class=\"docClass\">skipWeekendsDuringDragDrop</a> <code>true</code> to skip the weekends and holidays during drag and drop operations (move/resize).</li>\n</ul>\n\n\n<h2 id='gantt_calendars-section-calendar-manager'>Calendar manager</h2>\n\n<p>The <a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">Gnt.data.CalendarManager</a> is a class that implements a centralized storage of all the calendars related to the project.\nEach <a href=\"#!/api/Gnt.model.Calendar\" rel=\"Gnt.model.Calendar\" class=\"docClass\">record</a> put into <a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">Gnt.data.CalendarManager</a> instance, except the root node, is automatically linked to its <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">calendar instance</a>\nwhich can be retrieved by <a href=\"#!/api/Gnt.data.CalendarManager-method-getCalendar\" rel=\"Gnt.data.CalendarManager-method-getCalendar\" class=\"docClass\">getCalendar</a> method.</p>\n\n<pre><code>var calendarManager = Ext.create('<a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">Gnt.data.CalendarManager</a>');\n\n...\n\n// gets calendar instance having calendar Id equal to 'general'\nvar calendar = calendarManager.getCalendar('general');\n\n// the same using the <a href=\"#!/api/Gnt.model.Calendar\" rel=\"Gnt.model.Calendar\" class=\"docClass\">Gnt.model.Calendar</a> <a href=\"#!/api/Gnt.model.Calendar-method-getCalendar\" rel=\"Gnt.model.Calendar-method-getCalendar\" class=\"docClass\">getCalendar</a> method.\ncalendar = calendarManager.getById('general').getCalendar();\n</code></pre>\n\n<p>When you add a new record, a new calendar is automatically created:</p>\n\n<pre><code>// append a new record to the calendar manager\nvar record = calendarManager.getRoot().appendChild({\n    leaf                : true,\n    Name                : 'New Calendar',\n    DaysPerMonth        : 30,\n    DaysPerWeek         : 7,\n    HoursPerDay         : 24,\n    WeekendsAreWorkdays : true,\n    WeekendFirstDay     : 6,\n    WeekendSecondDay    : 0,\n    DefaultAvailability : [ '00:00-24:00' ]\n});\n\n// get newly created calendar to calendar2 variable\nvar calendar2 = record.getCalendar();\n</code></pre>\n\n<p>The calendar manager is also able to work together with the <a href=\"#!/guide/gantt_crud_manager\">CRUD manager</a> which means that all calendars can be loaded in a single request.\nPlease read the <a href=\"#!/guide/gantt_calendars-section-4\">Calendar CRUD</a> chapter for details.</p>\n\n<h2 id='gantt_calendars-section-advanced-features'>Advanced features</h2>\n\n<h3 id='gantt_calendars-section-individual-days'>Individual days</h3>\n\n<p>Previous section described the basic features of calendars and was mostly talking about weekends. Now let's see how we can create an arbitrary day off in the calendar.</p>\n\n<p>Internally, a calendar is represented by a subclass of the Ext.data.Store and can be loaded with a collection of <a href=\"#!/api/Gnt.model.CalendarDay\" rel=\"Gnt.model.CalendarDay\" class=\"docClass\">Gnt.model.CalendarDay</a> instances. Every day instance\ncan be of different types (see the <code>Type</code> field of the <a href=\"#!/api/Gnt.model.CalendarDay\" rel=\"Gnt.model.CalendarDay\" class=\"docClass\">Gnt.model.CalendarDay</a>):</p>\n\n<ul>\n<li>\"Day override\". Represents a certain date in the calendar, for example 2013/01/10. This type of day has the highest priority.</li>\n<li>\"Week day override\" sometimes called \"week override\" or \"non-standard week\". Represents a week day within a certain time span,\nfor example all Mondays between 2013/01/10 and 2013/02/10 (inclusive). This type has the next highest level of priority.</li>\n<li>\"Week day\". Represents a certain week day in the calendar, for example - all Mondays. It has the lowest priority among all the \"special\" days, but still\noverrides the value of <a href=\"#!/api/Gnt.data.Calendar-cfg-defaultAvailability\" rel=\"Gnt.data.Calendar-cfg-defaultAvailability\" class=\"docClass\">defaultAvailability</a> config option for that day.</li>\n</ul>\n\n\n<p>Every calendar day instance also has the <code>Availability</code> field. It defines the working time for that day instance, for example : <code>[ '08:00-12:00', '13:00-17:00' ]</code></p>\n\n<p>So, to create a holiday in the calendar or adjust the working time for a certain day - simply add an appropriate calendar day instance to it:</p>\n\n<pre><code>var calendar    = new <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a>({\n    defaultAvailability : [ '08:00-12:00', '13:00-17:00' ]\n})\n\ncalendar.add([\n    // a concrete date\n    {\n        Date            : new Date(2013, 0, 1),\n        Name            : 'New year',\n        Cls             : 'app-calendar-newyear'\n    },\n    {\n        Date            : new Date(2013, 0, 5),\n        Name            : 'Working Saturday',\n        Cls             : 'app-calendar-workingsaturday',\n        Availability    : [ '08:00-12:00', '13:00-16:00' ]\n    },\n    // A day of the week\n    // Increases working time on all Mondays by one 1 hour\n    {\n        Weekday         : 1,\n        Name            : 'All Mondays',\n        Cls             : 'app-calendar-monday',\n        Availability    : [ '07:00-12:00', '13:00-17:00' ]\n    }\n])\n</code></pre>\n\n<p>Note that you can also specify that some weekend days should actually be working days, using the <code>IsWorkingDay</code> field. In such cases, the <code>Availability</code> field is still required, or the Gantt chart won't schedule any tasks on that day.</p>\n\n<p>\"Week day overrides\" consist of several days and also require the presence of a \"main day\". For their creation, it's recommended to use\nthese API methods in the calendar: <a href=\"#!/api/Gnt.data.Calendar-method-addNonStandardWeek\" rel=\"Gnt.data.Calendar-method-addNonStandardWeek\" class=\"docClass\">addNonStandardWeek</a>, <a href=\"#!/api/Gnt.data.Calendar-method-removeNonStandardWeek\" rel=\"Gnt.data.Calendar-method-removeNonStandardWeek\" class=\"docClass\">removeNonStandardWeek</a>.</p>\n\n<p>You can visually edit the content of the calendar using the <a href=\"#!/api/Gnt.widget.calendar.Calendar\" rel=\"Gnt.widget.calendar.Calendar\" class=\"docClass\">Gnt.widget.calendar.Calendar</a> widget.</p>\n\n<h3 id='gantt_calendars-section-assigning-individual-calendars-to-tasks-and-resources'>Assigning individual calendars to tasks and resources</h3>\n\n<p>Tasks and resources may have their own calendars. If a calendar is assigned to a task, in defines the time when task can be performed.\nIf a calendar is assigned to a resource, in defines the time when the resource is available to perform tasks.</p>\n\n<p><strong>Important</strong>. If a task has no own calendar but has assigned resources, then it will use the calendars of the resources assigned to determine the time when it can be performed.\nSuch a task can only be performed during time spans when at least one assigned resource has working time defined.\nIf a task has its own calendar and has assigned resources, then it will use the <em>intersection</em> of the working time from igs own calendar and of the calendars of its resources to determine the time when it can be performed.\nSuch a task can be performed only when at least one assigned resource has working time defined <em>and</em> the task has working time defined.</p>\n\n<p>To be assignable, the calendar need to have an unique <a href=\"#!/api/Gnt.data.Calendar-cfg-calendarId\" rel=\"Gnt.data.Calendar-cfg-calendarId\" class=\"docClass\">calendarId</a> property:</p>\n\n<pre><code>var calendar1   = new <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a>({\n    calendarId      : 'calendar1'\n})\n</code></pre>\n\n<p>The value of this property can be provided in the <code>CalendarId</code> field of the <a href=\"#!/api/Gnt.model.Task\" rel=\"Gnt.model.Task\" class=\"docClass\">Gnt.model.Task</a> or <a href=\"#!/api/Gnt.model.Resource\" rel=\"Gnt.model.Resource\" class=\"docClass\">Gnt.model.Resource</a>.</p>\n\n<h3 id='gantt_calendars-section-parent-child-relations-between-calendars'>Parent-child relations between calendars</h3>\n\n<p>Calendars form a tree-like structure, using parent-child relations. The parent of a calendar can be specified with the <a href=\"#!/api/Gnt.data.Calendar-cfg-parent\" rel=\"Gnt.data.Calendar-cfg-parent\" class=\"docClass\">parent</a> property, or later\nchanged with the <a href=\"#!/api/Gnt.data.Calendar-method-setParent\" rel=\"Gnt.data.Calendar-method-setParent\" class=\"docClass\">setParent</a> method:</p>\n\n<pre><code>var calendar2   = new <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a>({\n    parent          : 'calendar1',\n    calendarId      : 'calendar2'\n})\n\nvar calendar3   = new <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a>({\n    calendarId      : 'calendar2'\n})\n\ncalendar2.setParent(calendar3);\n</code></pre>\n\n<p>A child calendar will \"inherit\" the following configurations from its parent: \"day overrides\", \"week days\", \"week day overrides\" and even <code>defaultAvailability/weekendsAreWorkdays</code> configs.\nAny child calendar days defined on the same dates as its parent calendar will override the parent.</p>\n\n<p>Please note, that the <code>defaultAvailability/weekendsAreWorkdays</code> configs are inherited in case they were not provided when instantiating the calendar\nand default values were used. If you need to override any of these configs - provide the value to the calendar, even if it's the same as default value:</p>\n\n<pre><code>var childCalendar   = new <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a>({\n    parent                  : 'calendar1',\n    // explicitly providing the value (even though `false` is default)\n    // to override this config from parent\n    weekendsAreWorkdays     : false\n})\n</code></pre>\n\n<p>Here's an example of how to use this feature: The main project calendar will contain \"global\" holidays (national holidays) and all other calendars of tasks and resources can be children of this global calendar.\nThis way, the calendars of tasks and resources can only contain those days that are specific for that task or resource and there's no need to re-define all the holidays.</p>\n\n<h2 id='gantt_calendars-section-calendar-crud'>Calendar CRUD</h2>\n\n<p>When using calendars with individual days off (\"day overrides\"), always store the <code>Duration</code> field in your database. Moreover, it is recommended that you store\n<em>only</em> <code>StartDate</code> and <code>Duration</code>, and <em>not</em> store the <code>EndDate</code> in the DB.</p>\n\n<p>There are two approaches to interact with a server when it comes to calendars:</p>\n\n<ul>\n<li>classic <em>per-store</em> approach</li>\n<li>CRUD manager usage</li>\n</ul>\n\n\n<h3 id='gantt_calendars-section-classic-per-store-approach'>Classic per-store approach</h3>\n\n<p>This method relies on the classic <em>Sencha</em> provided proxy classes when the user has to define a proxy for each individual store to give it the ability to interact with a server.\nSo in our case, the user will have to do it for each calendar instance he plans to deal with.</p>\n\n<p>For performance and consistency reasons, it is recommended to load all your calendars <strong>before</strong> any other stores. The task store should always\nbe loaded after calendars have been loaded. If you don't Gantt scheduling engine will need to re-adjust all tasks according to the calendars when they are loaded.\nWhen updating a task, gantt needs information about its assignments and dependencies, so any other stores should be already loaded. The correct order to load data:</p>\n\n<ol>\n<li>Calendars (including setting the \"calendarId\" property).</li>\n<li>Resource store, assignment store, dependencies store in any order</li>\n<li>Task store.</li>\n</ol>\n\n\n<p>There's no need to delay the loading of the task store. You can start several requests simultaneously, but remember to load the data into the stores in the correct order. The other option\nis to make the initial loading package to contain all data.</p>\n\n<p>The easiest way to edit the data in the calendar is to use the special widget: <a href=\"#!/api/Gnt.widget.calendar.Calendar\" rel=\"Gnt.widget.calendar.Calendar\" class=\"docClass\">Gnt.widget.calendar.Calendar</a></p>\n\n<h3 id='gantt_calendars-section-crud-manager-usage'>CRUD manager usage</h3>\n\n<p>The preferred option is to use a <a href=\"#!/guide/gantt_crud_manager\">CRUD manager</a> with a <a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">calendar manager</a>.\nThis setup will allow to load <strong> all the project calendars </strong> by a single batch request together with other project related stores (and persisting of changes will also be done in one request).\nIn this case you don't need to worry about things like loading order or the creation of individual calendars.\nThe <a href=\"#!/guide/gantt_crud_manager\">CRUD manager</a> class is aware of the correct loading order and\na <a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">calendar manager</a> will create all the project calendars properly.</p>\n\n<pre><code>// centralized store of all the project calendars\nvar calendarManager = Ext.create('<a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">Gnt.data.CalendarManager</a>');\n\nvar taskStore = Ext.create('<a href=\"#!/api/Gnt.data.TaskStore\" rel=\"Gnt.data.TaskStore\" class=\"docClass\">Gnt.data.TaskStore</a>', {\n    calendarManager : calendarManager,\n    resourceStore   : resourceStore,\n    dependencyStore : dependencyStore,\n    assignmentStore : assignmentStore\n});\n\n// centralized store of all the project stores\n// will automatically load calendarManager, resourceStore, dependencyStore,\n// assignmentStore and taskStore stores by a single batch request\nvar crudManager = Ext.create('<a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a>', {\n    taskStore       : taskStore,\n    ...\n});\n</code></pre>\n\n<h2 id='gantt_calendars-section-cheatsheet'>Cheatsheet</h2>\n\n<p>Lets review a few different scenarios and how you can configure your project for them:</p>\n\n<p>1) <strong>Requirements:</strong> You are only interested in days for your tasks. Start time (12:00, 18:30 etc), end time doesn't matter in your case, only the date (2013/01/01, 2013/02/07).\nYou would like to <em>exclude</em> weekends when calculating the duration of a task and only count working time.</p>\n\n<p><strong>Solution:</strong> Use a plain <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a> instance, possibly with adjusted duration conversion parameters.</p>\n\n<p>2) <strong>Requirements:</strong> You are only interested in days for your tasks. Start time (12:00, 18:30 etc), end time doesn't matter in your case, only the date (2013/01/01, 2013/02/07).\nYou would like to <em>include</em> weekends when calculating the duration of a task and count any time.</p>\n\n<p><strong>Solution:</strong> Use a plain <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a> instance, possibly with adjusted duration conversion parameters. Set <a href=\"#!/api/Gnt.data.Calendar-cfg-weekendsAreWorkdays\" rel=\"Gnt.data.Calendar-cfg-weekendsAreWorkdays\" class=\"docClass\">weekendsAreWorkdays</a> to <code>true</code></p>\n\n<p>3) <strong>Requirements:</strong> You are only interested in days for your tasks. Start time (12:00, 18:30 etc), end time doesn't matter in your case, only the date (2013/01/01, 2013/02/07).\nYou would like to <em>exclude</em> weekends when calculating the duration of a task and only count working time. You would like to define some holidays, that will be global and those should be excluded\nfrom the working time as well.</p>\n\n<p><strong>Solution:</strong> Use a plain <a href=\"#!/api/Gnt.data.Calendar\" rel=\"Gnt.data.Calendar\" class=\"docClass\">Gnt.data.Calendar</a> instance, with possibly adjusted duration conversion parameters. Add \"day overrides\" to it - one for each holiday.</p>\n\n<p>4) <strong>Requirements:</strong> Start time and end time matters in your case, you would like to be precise (e.g., Task1 starts at 2013/01/01 15:00).\nYou would like to <em>exclude</em> the weekends and non-working time when calculating the duration of a task and only count working time. You need to define working time for every day.\nCertain week days or days in the calendar can have different working time. Certain tasks or resources may have their own rules for working time.</p>\n\n<p><strong>Solution:</strong> Use a <a href=\"#!/api/Gnt.data.calendar.BusinessTime\" rel=\"Gnt.data.calendar.BusinessTime\" class=\"docClass\">Gnt.data.calendar.BusinessTime</a> instance, possibly with adjusted duration conversion parameters. Add \"day overrides\" to it - one for each holiday.\nAdd additional calendar instances (with \"calendarId\" property defined) for every task and resource that needs their own calendar (consider using parent-child relation between them and project calendar). Make use of\nthe <a href=\"#!/api/Gnt.widget.calendar.Calendar\" rel=\"Gnt.widget.calendar.Calendar\" class=\"docClass\">Gnt.widget.calendar.Calendar</a> classvfor editing calendar contents.</p>\n","title":"Using calendars"});